#include<cstdlib>
#include <omp.h>
#include <iostream>

bool
prime (int n)
{
  if (n == 1)
	return false;
  if (n % 2 == 0 && n != 2)
	return false;
  for (int i = 3; i * i <= n; i += 2)
	if (n % i == 0)
	  return false;

  return true;
}

int
prime_numbers1 (int n)
{
  int sum = 0;

  for (int i = 3; i <= n; i++)
	{
	  if (prime (i))
		{
		  sum += 1;
		}
	}

  return sum + 1;
}

int
prime_numbers2 (int n)
{
  int sum = 1;

#pragma omp parallel sections reduction(+:sum)
  {
#pragma omp section
	{
	  for (int i = 3; i <= n / 2; i++)	//i+=2 //i+=4 
		{
		  if (prime (i))
			{
			  sum += 1;
			}
		}
	}

#pragma omp section
	{
	  for (int i = n / 2 + 1; i <= n; i++)	//i+=2 !!!! //i+=4 
		{
		  if (prime (i))
			{
			  sum += 1;
			}
		}

	}
  }
  return sum;
}

int
prime_numbers3 (int n, int t)
{
  int sum = 1;

#pragma omp parallel sections reduction(+:sum)
    {
#pragma omp section
	    {
	#pragma omp parallel sections reduction(+:sum)
            {
    #pragma omp section
                {
	               for (int i = 3; i <= t; i+=4)	//i+=2 //i+=4 
		           {
		            if (prime (i))
			            {
			            sum += 1;
			            }
		            }
                }
    #pragma omp section
                {
	                for (int i = 5; i <= t; i+=4)	//i+=2 //i+=4 
		                {
		                if (prime (i))
			                {
			                sum += 1;
			                }
		                }
                }
            }
	    }
#pragma omp section
	    {
	#pragma omp parallel sections reduction(+:sum)
            {
    #pragma omp section
                {
	                for (int i = t + 1 + t % 2; i <= n; i+=4)	//i+=2 //i+=4 
		                {
		                if (prime (i))
			                {
			                sum += 1;
			                }
		                }
                }
    #pragma omp section
                {
	                for (int i = t + 3 + t % 2; i <= n; i+=4)	//i+=2 //i+=4 
		                {
		                if (prime (i))
			                {
			                sum += 1;
			                }
		                }
                }
            }
	    }
    }
	
	return sum;
	

}


/*int prime_numbers4 (int n)
{
  int sum = 1;

#pragma omp parallel sections reduction(+:sum)
  {
#pragma omp section
	{
	  for (int i = 3; i <= n / 4; i++)
		{
		  if (prime (i))
			{
			  sum += 1;
			}
		}
	}

#pragma omp section
	{
	  for (int i = n / 4 + 1; i <= n / 2; i++)
		{
		  if (prime (i))
			{
			  sum += 1;
			}
		}

	}


#pragma omp section
	{
	  for (int i = n / 2 + 1; i <= (3 * n) / 4; i++)
		{
		  if (prime (i))
			{
			  sum += 1;
			}
		}

	}


#pragma omp section
	{
	  for (int i = (3 * n) / 4 + 1; i <= n; i++)
		{
		  if (prime (i))
			{
			  sum += 1;
			}
		}

	}
  }
  return sum;
} */


int main ()
{
  int n = 0;
  std::cin >> n;
  std::cout << prime_numbers1 (n) << std::endl;
  std::cout << prime_numbers2 (n) << std::endl;
  std::cout << prime_numbers3 (n, 101) << std::endl;
  return EXIT_SUCCESS;
}