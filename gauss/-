#include <iostream>

void Divide(double** M, int i, double k, int n)
{
    for (int j = 0; j <= n; j++)
    {
        M[i][j] = M[i][j] / k;
    }
}

void Substract(double** M, int i, int j, double g, int n)
{
    for (int k = 0; k <= n; k++)
    {
        M[i][k] -= g * M[j][k];
    }
}

void Swap(double** M, int i, int j, int n)
{
    double c = 0;
    for (int k = 0; k <= n; k++)
    {
        c = M[i][k];
        M[i][k] = M[j][k];
        M[j][k] = c;
    }
}

void Print(double** M, int n, int m)
{
    for (int i = 0; i <= n - 1; i++)
    {
        for (int j = 0; j <= m - 1; j++)
        {
            std::cout << M[i][j] << " ";
        }
        std::cout << std::endl;
    }
}

void Transform(double** M, int n)
{
    for (int j = 0; j <= n - 1; j++)
    {
        for (int i = j; i <= n - 1; i ++)
        {
            if (M[i][j] != 0)
            {
                Swap(M, j, i, n);
                Print (M, n, n + 1);
                std::cout << std::endl;
                Divide(M, j, M[j][j], n);
                Print (M, n, n + 1);
                std::cout << std::endl;
                
                for (int k = j + 1; k <= n - 1; k ++)
                {
                    Substract(M, k, j, M[k][j], n);
                    Print (M, n, n + 1);
                    std::cout << std::endl;
                }
                
            }
            
        }
        
    }
    std::cout << "-----------------" << std::endl;
}

void Transform2(double** M, int n)
{
    for (int i = 0; i <= n - 2; i++)
    {
        int k = n - 2 - i;
        for (int j = k; j <= n - 1; j ++)
        {
            Substract(M, k, j, M[k][j], n);
            Print (M, n, n + 1);
            std::cout << std::endl;
        }
        
    }
}


void Cin(double** M, int n, int m)
{
    for (int i = 0; i <= n - 1; i++)
    {
        for (int j = 0; j <= m - 1; j++)
        {
            std::cin >> M[i][j];
        }
    }
}




int main()
{
    int n = 0;
    std::cin >> n;
    
    double **matrix = new double* [n];
    for (int i = 0; i <= n - 1; i++)
    {
        matrix[i] = new double [n + 1];
    }
    
    Cin(matrix, n, n + 1);
    Transform(matrix, n);
    Print (matrix, n, n + 1);
    Transform2(matrix, n);
    
    return EXIT_SUCCESS;
}
